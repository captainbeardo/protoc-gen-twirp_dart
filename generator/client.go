package generator

import (
	"bytes"
	"fmt"
	"os"
	"path"
	"path/filepath"
	"strings"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const apiTemplate = `//
// Code generated by protoc-gen-twirp_dart. DO NOT EDIT.
// Generated from: {{.FileName}}
//
// @dart = 2.12
// ignore_for_file: annotate_overrides,camel_case_types,constant_identifier_names,deprecated_member_use_from_same_package,directives_ordering,library_prefixes,non_constant_identifier_names,prefer_final_fields,return_of_invalid_type,unnecessary_const,unnecessary_import,unnecessary_this,unused_import,unused_shown_name
{{- range .Imports }}
import '{{.Path}}';
{{- end }}

const _protobufContentType = 'application/protobuf';

{{- range .Services}}
{{$prefix := printf "/%s.%s" .Package .Name}}
abstract class {{.Name}} {

	{{- range .Methods}}
	Future<{{.OutputType}}>{{.Name}}({{.InputType}} {{.InputArg}});
  {{- end}}
}

class {{.Name}}ProtobufClient implements {{.Name}} {
	final String hostname;
	final String pathPrefix;
	Client _httpClient = Client();

  {{.Name}}ProtobufClient(this.hostname, {this.pathPrefix = '/twirp', Client? httpClient}) {
		if (httpClient != null) {
			_httpClient = httpClient;
		}
	}

	Future<T> _makeRequest<T,	RT extends GeneratedMessage>(String path, RT request,
		T Function(List<int>) builder) async {
		final url = "$hostname$pathPrefix$path";
		final uri = Uri.parse(url);
		final body = request.writeToBuffer();
		final headers = {
			'Content-Type': _protobufContentType,
			'Content-Length': body.length.toString()
		};

		final response = await _httpClient.post(uri, headers: headers, body: body);

		if (response.statusCode != 200) {
			throw decodeException(response);
		}
		return builder(response.bodyBytes);
	}

  {{- range .Methods}}

	@override
	Future<{{.OutputType}}> {{.Name}}({{.InputType}} {{.InputArg}}) async {
		return _makeRequest("{{$prefix}}/{{.Path}}", {{.InputArg}},
				(b) => {{.OutputType}}.fromBuffer(b));
	}
  {{- end}}
}

Exception decodeException(Response response) {
	try {
		final value = json.decode(response.body);
		return TwirpException.fromJson(value);
	} catch (e) {
		return TwirpException("unknown", response.body, e);
	}
}

class TwirpException implements Exception {
  final String code;
  final String msg;
  final dynamic meta;

  TwirpException(this.code, this.msg, this.meta);

  factory TwirpException.fromJson(Map<String, dynamic> json) {
    return TwirpException(
        json['code'] as String, json['msg'] as String, json['meta']);
  }

  @override
  String toString() {
    return 'TwirpException{code: $code, msg: $msg, meta: $meta}';
  }
}
{{- end}}
`

type Model struct {
	Name      string
	Primitive bool
	Fields    []ModelField
}

type ModelField struct {
	Name          string
	Type          string
	InternalType  string
	JSONName      string
	JSONType      string
	IsInt64       bool
	IsMessage     bool
	IsRepeated    bool
	IsMap         bool
	IsOptional    bool
	MapKeyField   *ModelField
	MapValueField *ModelField
}

type Service struct {
	Name    string
	Package string
	Methods []ServiceMethod
}

type ServiceMethod struct {
	Name       string
	Path       string
	InputArg   string
	InputType  string
	OutputType string
}

func NewAPIContext(filename string) APIContext {
	ctx := APIContext{FileName: filename}
	ctx.modelLookup = make(map[string]*Model)

	return ctx
}

type APIContext struct {
	Models      []*Model
	Services    []*Service
	Imports     []Import
	modelLookup map[string]*Model
	FileName    string
}

type Import struct {
	Path string
}

func (ctx *APIContext) AddModel(m *Model) {
	ctx.Models = append(ctx.Models, m)
	ctx.modelLookup[m.Name] = m
}

func (ctx *APIContext) ApplyImports(f *protogen.File) {
	var deps []Import

	if len(ctx.Services) > 0 {
		deps = append(
			deps,
			Import{"dart:async"},
			Import{"package:http/http.dart"},
			Import{"package:protobuf/protobuf.dart"},
		)
	}
	deps = append(deps, Import{"dart:convert"})

	baseName := filepath.Base(f.Proto.GetName())
	baseName = strings.TrimSuffix(baseName, ".proto")

	deps = append(deps, Import{fmt.Sprintf("./%s.pb.dart", baseName)})

	for _, dep := range f.Proto.Dependency {
		if dep == "google/protobuf/timestamp.proto" {
			continue
		}
		importPath := path.Dir(dep)
		sourceDir := path.Dir(f.Proto.GetName())
		sourceComponents := strings.Split(sourceDir, fmt.Sprintf("%c", os.PathSeparator))
		distanceFromRoot := len(sourceComponents)
		for _, pathComponent := range sourceComponents {
			if strings.HasPrefix(importPath, pathComponent) {
				importPath = strings.TrimPrefix(importPath, pathComponent)
				distanceFromRoot--
			}
		}
		deps = append(deps, Import{fullImportPath(dartPbFilename(dep), importPath, distanceFromRoot)})
	}
	ctx.Imports = deps
}

func fullImportPath(fileName string, importPath string, distanceFromRoot int) string {
	fullPath := fileName
	fullPath = path.Join(importPath, fullPath)
	if distanceFromRoot > 0 {
		for i := 0; i < distanceFromRoot; i++ {
			fullPath = path.Join("..", fullPath)
		}
	}

	return fullPath
}

func CreateClientAPI(p *protogen.Plugin, f *protogen.File) error {
	ctx := NewAPIContext(*f.Proto.Name)
	for _, m := range f.Messages {
		model := &Model{
			Name: string(m.Desc.Name()),
		}
		for _, f := range m.Fields {
			model.Fields = append(model.Fields, newField(f))
		}
		ctx.AddModel(model)
	}
	for _, s := range f.Services {
		service := &Service{
			Name:    string(s.Desc.Name()),
			Package: f.Proto.GetPackage(),
		}

		for _, m := range s.Methods {
			methodPath := string(m.Desc.Name())
			methodName := strings.ToLower(methodPath[0:1]) + methodPath[1:]
			in := string(m.Input.Desc.Name())
			arg := strings.ToLower(in[0:1]) + in[1:]
			service.Methods = append(service.Methods, ServiceMethod{
				Name:       methodName,
				Path:       methodPath,
				InputArg:   arg,
				InputType:  in,
				OutputType: string(m.Output.Desc.Name()),
			})
		}

		ctx.Services = append(ctx.Services, service)
	}

	ctx.AddModel(&Model{
		Name:      "Date",
		Primitive: true,
	})
	ctx.ApplyImports(f)

	funcMap := template.FuncMap{
		"stringify": stringify,
		"parse":     parse,
		"mapLiteral": func(s string) string {
			return strings.TrimPrefix(s, "Map")
		},
		"isNumber": func(m *ModelField) bool {
			return m.JSONType == "number"
		},
	}

	t, err := template.New("client_api").Funcs(funcMap).Parse(apiTemplate)
	if err != nil {
		return err
	}

	b := bytes.NewBufferString("")
	err = t.Execute(b, ctx)
	if err != nil {
		return err
	}

	ff := p.NewGeneratedFile(twirpFilename(f.Proto.GetName()), "")
	_, err = ff.Write(b.Bytes())

	return err
}

func newField(f *protogen.Field) ModelField {
	jsonName := string(f.Desc.Name())
	name := camelCase(jsonName)
	dartType, internalType, jsonType := protoToDartType(f)
	field := ModelField{
		Name:         name,
		Type:         dartType,
		InternalType: internalType,
		JSONName:     jsonName,
		JSONType:     jsonType,
		IsInt64:      f.Desc.Kind() == protoreflect.Int64Kind,
		IsMap:        f.Desc.IsMap(),
		IsRepeated:   f.Desc.IsList(),
		IsOptional:   f.Desc.HasOptionalKeyword(),
	}
	if field.IsMap {
		mapKeyField := newField(f.Message.Fields[0])
		field.MapKeyField = &mapKeyField
		mapValueField := newField(f.Message.Fields[1])
		field.MapValueField = &mapValueField
		field.Type = fmt.Sprintf("Map<%s,%s>", mapKeyField.Type, mapValueField.Type)
	} else { // not sure we require the else here.
		field.IsMessage = f.Desc.Kind() == protoreflect.MessageKind
	}
	return field
}

func camelCase(s string) string {
	parts := strings.Split(s, "_")

	for i, p := range parts {
		if i == 0 {
			parts[i] = p
		} else {
			parts[i] = strings.ToUpper(p[0:1]) + strings.ToLower(p[1:])
		}
	}

	return strings.Join(parts, "")
}

// generates the (Type, JSONType) tuple for a ModelField so marshal/unmarshal functions
// will work when converting between TS interfaces and protobuf JSON.
func protoToDartType(f *protogen.Field) (string, string, string) {
	dartType := "String"
	jsonType := "string"
	internalType := "String"

	switch f.Desc.Kind() {
	case protoreflect.DoubleKind:
		dartType = "double"
		jsonType = "number"
		break
	case protoreflect.Fixed32Kind,
		protoreflect.Fixed64Kind,
		protoreflect.Int32Kind,
		protoreflect.Int64Kind:
		dartType = "int"
		jsonType = "number"
	case protoreflect.StringKind:
		dartType = "String"
		jsonType = "string"
	case protoreflect.BoolKind:
		dartType = "bool"
		jsonType = "boolean"
	case protoreflect.MessageKind:
		name := string(f.Message.Desc.Name())

		// Google WKT Timestamp is a special case here:
		//
		// Currently the value will just be left as jsonpb RFC 3339 string.
		// JSON.stringify already handles serializing Date to its RFC 3339 format.
		//
		if f.Message.Desc.FullName() == "google.protobuf.Timestamp" {
			dartType = "DateTime"
			jsonType = "string"
		} else {
			dartType = name
			jsonType = name + "JSON"
		}
	}
	internalType = dartType

	if f.Desc.IsList() {
		dartType = "List<" + dartType + ">"
		jsonType = jsonType + "[]"
	}

	return dartType, internalType, jsonType
}

func stringify(f ModelField) string {
	if f.IsRepeated {
		singularType := f.Type[0 : len(f.Type)-2] // strip array brackets from type

		if f.Type == "Date" {
			return fmt.Sprintf("m.%s.map((n) => n.toISOString())", f.Name)
		}

		if f.IsMessage {
			return fmt.Sprintf("m.%s.map(%sToJSON)", f.Name, singularType)
		}
	}

	if f.Type == "Date" {
		return fmt.Sprintf("m.%s.toISOString()", f.Name)
	}

	if f.IsMessage {
		return fmt.Sprintf("%sToJSON(m.%s)", f.Type, f.Name)
	}

	return "m." + f.Name
}

func parse(f ModelField, modelName string) string {
	field := "(((m as " + modelName + ")." + f.Name + ") ? (m as " + modelName + ")." + f.Name + " : (m as " + modelName + "JSON)." + f.JSONName + ")"
	if strings.Compare(f.Name, f.JSONName) == 0 {
		field = "m." + f.Name
	}

	if f.IsRepeated {
		singularType := f.Type[0 : len(f.Type)-2] // strip array brackets from type

		if f.Type == "Date" {
			return fmt.Sprintf("%s.map((n) => Date(n))", field)
		}

		if f.IsMessage {
			return fmt.Sprintf("%s.map(JSONTo%s)", field, singularType)
		}
	}

	if f.Type == "Date" {
		return fmt.Sprintf("Date(%s)", field)
	}

	if f.IsMessage {
		return fmt.Sprintf("JSONTo%s(%s)", f.Type, field)
	}

	return field
}
